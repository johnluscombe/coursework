'From Pharo5.0 of 16 April 2015 [Latest update: #50770] on 30 March 2017 at 3:52:17.538828 pm'!Object subclass: #Polynomial	instanceVariableNames: 'coefficient'	classVariableNames: ''	poolDictionaries: ''	category: 'COS382'!!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:58'!= aPoly    "compares two polynomials"    ^ coefficient = aPoly asArray ! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:55'!< aPoly	^ self shouldNotImplement ! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:54'!!!= aPoly	^ self ~= aPoly! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JohnLuscombe 3/30/2017 11:38'!graphFrom: fromNumber graphTo: toNumber	"displays a graph of polynomial from fromNumber to toNumber"		| diag |	diag := GETDiagramBuilder new.	diag lineDiagram    	height: 200;    	models: (fromNumber to: toNumber);    	y: [ :x | self evaluate: x ]; "Block uses parameter x"    	color: Color black;    	regularAxisAsInteger.	diag open.! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JonDenning 3/7/2017 17:01'!coefficient: power	"return coefficient of power term"	(power >= coefficient size) ifTrue: [ ^ 0 ].	^ coefficient at: power + 1! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JonDenning 3/5/2015 17:37'!initialize	super initialize.	coefficient := #( 0 )! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JohnLuscombe 3/30/2017 11:56'!evaluate	"displays a prompt window that accepts a value and prints to Transcript the value of the polynomial evaluated at that value"		| aNumber s |	aNumber := (UIManager default request: 'Enter number to evaluate polynomial') asNumber.	s := 0.	0 to: (self degree) do: [ :power | s := s + ((self coefficient: power) * (aNumber raisedTo: power)) ].		^ s! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JohnLuscombe 3/30/2017 11:55'!evaluate: aNumber	"returns polynomial evaluated at aNumber"		| s |	s := 0.	0 to: (self degree) do: [ :power | s := s + ((self coefficient: power) * (aNumber raisedTo: power)) ].		^ s! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JonDenning 3/7/2017 17:00'!asArray	"return array representation"	^ coefficient deepCopy! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JohnLuscombe 3/30/2017 10:31'!sum: aPoly	"return sum of two polynomials"		| maxDegree polynomialSum |	maxDegree := (self degree max: aPoly degree).	polynomialSum := Array new: (maxDegree+1).	0 to: maxDegree do: [		:power | polynomialSum at: (power+1) put: ((self coefficient: power) + (aPoly coefficient: power))	].	^ Polynomial new initialize: polynomialSum.! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JohnLuscombe 3/30/2017 11:18'!differentiate	"returns the derivative of the polynomial p"		| polynomialDerivative |	polynomialDerivative := Array new: self degree.	1 to: (self degree) do: [ :power | polynomialDerivative at: power put: (self coefficient: power) * power].		^ Polynomial new initialize: polynomialDerivative! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JonDenning 3/7/2017 17:01'!degree	"return degree of polynomial"	^ coefficient size - 1! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JonDenning 3/7/2017 17:02'!initialize: initValue	"private: initialize coefficient instance variable"	(initValue isKindOf: (self class))		ifTrue: [ coefficient := (initValue asArray) deepCopy ]		ifFalse: [			(initValue isKindOf: Array)				ifTrue: [ coefficient := initValue deepCopy ]				ifFalse: [ self initialize ]		]! !